Aula internet 1_2_correcao no final
#include <Arduino.h>
#include <PubSubClient.h>
#include <WiFi.h>
#include <ArduinoJson.h>
#include <Bounce2.h>
#include <ezTime.h>
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include "internet.h"
#define pinLed 2
#define pinButton 0
#define DHTPIN 15
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
WiFiClient espClient;
PubSubClient client(espClient);
LiquidCrystal_I2C lcd(0x27, 20, 4);
Timezone tempo;

const char *mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char *mqtt_id = "esp32LCD";
const char *mqtt_topic_sub = "senai134/mesa06/esp_inscrito";
const char *mqtt_topic_pub = "senai134/mesa06/esp_publicando";

void callback(char *, byte *, unsigned int);
void mqttConnect(void);
void controleLed(void);

Bounce button;

unsigned long intervalo = 100;
unsigned long intervaloDht = 5000;
bool estadoLed = false;
bool modoPisca = false;

void setup()
{
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  dht.begin();
  pinMode(pinLed, OUTPUT);
  tempo.setLocation("America/Sao_Paulo");
  button.attach(pinButton, INPUT_PULLUP);
  button.interval(5);
  conectaWiFi();
  waitForSync();

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop()
{
  checkWiFi();
  button.update();
  if (!client.connected())
    mqttConnect();

  client.loop();

  static unsigned long tempoAnterior = 0;
  unsigned long tempoAtual = millis();
  static unsigned long ultimaLeituraDHT = 0;

  if (tempoAtual - tempoAnterior > 1000000)
  {
    client.publish(mqtt_topic_pub, "Faz o l");
    tempoAnterior = tempoAtual;
  }

  if (button.changed())
  {
    int deboced = button.read();
    if (deboced == 1)
    {
      JsonDocument doc;
      String mensagem;
      doc["botao"] = deboced;
      doc["msg"] = "Ligado";
      doc["timetamp"] = tempo.now();
      serializeJson(doc, mensagem);
      client.publish(mqtt_topic_sub, mensagem.c_str());
    }
    else if (deboced == 0)
    {
      JsonDocument doc;
      String mensagem;
      doc["botao"] = deboced;
      doc["msg"] = "Desligado";
      doc["timetemp"] = tempo.now();
      serializeJson(doc, mensagem);
      client.publish(mqtt_topic_sub, mensagem.c_str());
    }
  }
  unsigned long agoraDht = millis();
  if (agoraDht - ultimaLeituraDHT >= intervaloDht)
  {
    ultimaLeituraDHT = agoraDht;
    float temperatura = dht.readTemperature();
    float umidade = dht.readHumidity();
    if (isnan(temperatura) || isnan(umidade)) //! Verifica se nao leu
    {
      Serial.println("Falha ao ler DHT");
    }
    else
    {

      JsonDocument docDHT;
      String mensagemDHT;
      docDHT["temperatura"] = temperatura;
      docDHT["umidade"] = umidade;
      docDHT["timetemp"] = tempo;
      serializeJson(docDHT, mensagemDHT);
      client.publish(mqtt_topic_pub, mensagemDHT.c_str());
    }
  }
  controleLed();
}

void callback(char *topic, byte *payload, unsigned int lenght)
{

  Serial.printf("mensagem recebida em %s: ", topic);

  String mensagem = "";
  for (unsigned int i = 0; i < lenght; i++)
  {
    char c = (char)payload[i];
    mensagem += c;
  }
  Serial.println(mensagem);

  JsonDocument doc;
  deserializeJson(doc, mensagem);

  if (!doc["estadoLed"].isNull())
  {
    estadoLed = doc["estadoLed"];
    modoPisca = 0;
  }
  if (!doc["modoPisca"].isNull())
  {
    modoPisca = doc["modoPisca"];
  }
  if (!doc["velocidade"].isNull())
  {
    intervalo = doc["velocidade"];
  }
  if (!doc["VelDHT"].isNull())
  {
    intervaloDht += 1000;
  }
  if (!doc["temperatura"].isNull() && !doc["umidade"].isNull() && !doc["timetamp"].isNull())
  {
    float temp = doc["temperatura"];
    float umi = doc["umidade"];
    time_t timetemp = doc["timetemp"];

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Temp: ");
    lcd.print(temp);
    lcd.print(" C");

    lcd.setCursor(0, 1);
    lcd.print("Umid: ");
    lcd.print(umi);
    lcd.print(" %");

    lcd.setCursor(0, 2);
    lcd.print("timeTemp: ");
    lcd.print(timetemp);
  }
}

void mqttConnect()
{
  while (!client.connected())
  {
    Serial.println("Conectando ao Mqtt...");

    if (client.connect(mqtt_id))
    {
      Serial.println("Conectado com sucesso");
      client.subscribe(mqtt_topic_pub);
    }

    else
    {
      Serial.print("falha, rc");
      Serial.println(client.state());
      Serial.println("Tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void controleLed()
{
  static unsigned long antes = 0;
  unsigned long agora = millis();

  if (modoPisca)
  {
    if (agora - antes > intervalo)
    {
      estadoLed = !estadoLed;
      antes = agora;
    }
  }

  if (intervalo <= 0 || intervalo < 100)
    intervalo = 100;
  if (intervalo >= 2000)
    intervalo = 2000;

  digitalWrite(pinLed, estadoLed);
}
/*
CORRECAO ESP DHT
#include <Arduino.h>
#include <PubSubClient.h>
#include <WiFi.h>
#include <ArduinoJson.h>
#include "internet.h"
#include <Bounce2.h>
#include <ezTime.h>
#include <DHT.h>

#define DHTPIN 25
#define DHTTYPE DHT22

#define pinLed 2

WiFiClient espClient;
PubSubClient client(espClient);
Bounce botao = Bounce();
Timezone tempo;
DHT dht(DHTPIN, DHTTYPE);


const char *mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char *mqtt_id = "esp32-senai134-thiago";
const char *mqtt_topic_sub = "senai134/mesa08/esp_inscrito";
const char *mqtt_topic_pub = "senai134/mesa08/esp_publicando";

bool estadoLed = false;
bool modoPisca = false;
bool envioMqtt = false;

unsigned long tempoEspera = 500;
unsigned long tempoEnvio = 5000;

void callback(char *, byte *, unsigned int);
void mqttConnect(void);
void controleLed(void);

void setup()
{
  Serial.begin(9600);
  dht.begin();
  pinMode(pinLed, OUTPUT);

  botao.attach(0, INPUT_PULLUP);

  conectaWiFi();

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  waitForSync();
  tempo.setLocation("America/Sao_Paulo");
  
  pinMode(0, INPUT_PULLUP);
}

void loop()
{
  checkWiFi();

  if (!client.connected())
    mqttConnect();

  client.loop();
  
  static unsigned long tempoAnterior = 0;
  unsigned long agora = millis();
  
  JsonDocument doc;
  String mensagem;
  
  
  botao.update();

  float temperatura, umidade;

  if(agora - tempoAnterior > tempoEnvio)
  {
    temperatura = dht.readTemperature();
    umidade= dht.readHumidity();

    doc["temp"] = temperatura;
    doc["umid"] = umidade;
    envioMqtt = true;
    tempoAnterior = agora;
  }


  if (botao.changed())
  {
    doc["botao"] = !botao.read();
    envioMqtt = true;
  }
  
  if (envioMqtt)
  {
    doc["timestamp"] = tempo.now();
    serializeJson(doc, mensagem);
    Serial.println(mensagem);
    client.publish(mqtt_topic_pub, mensagem.c_str());
    envioMqtt = false;
  }
  controleLed();
}

void callback(char *topic, byte *payload, unsigned int length)
{
  Serial.printf("mensagem recebida em %s: ", topic);

  String mensagem = "";
  for (unsigned int i = 0; i < length; i++)
  {
    char c = (char)payload[i];
    mensagem += c;
  }
  Serial.println(mensagem);

  JsonDocument doc;
  deserializeJson(doc, mensagem);

  if (!doc["estadoLed"].isNull())
  {
    estadoLed = doc["estadoLed"];
    modoPisca = 0;
  }

  if (!doc["modoPisca"].isNull())
  {
    modoPisca = doc["modoPisca"];
  }

  if (!doc["velocidade"].isNull())
  {
    tempoEspera = doc["velocidade"];
  }

  if(!doc["tempoEnvio"].isNull())
  {
    tempoEnvio = doc["tempoEnvio"];
  }
}

void mqttConnect()
{
  while (!client.connected())
  {
    Serial.println("Conectando ao MQTT...");

    if (client.connect(mqtt_id))
    {
      Serial.println("Conectado com sucesso");
      client.subscribe(mqtt_topic_sub);
    }

    else
    {
      Serial.print("falha, rc=");
      Serial.println(client.state());
      Serial.println("tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void controleLed()
{
  static unsigned long ultimaMudanca = 0;
  unsigned long agora = millis();

  if (modoPisca)
  {
    if (agora - ultimaMudanca > tempoEspera)
    {
      estadoLed = !estadoLed;
      ultimaMudanca = agora;
    }
  }

  digitalWrite(pinLed, estadoLed);
}
*/

/*
CORRECAO PARA O ESP MOSTRAR NO LCD
#include <Arduino.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <ezTime.h>
#include <LiquidCrystal_I2C.h>
#include <WiFi.h>
#include "internet.h"

WiFiClient espClient;
PubSubClient client(espClient);
Timezone tempoLocal;
LiquidCrystal_I2C lcd(0x27, 20, 4);

const char *mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char *mqtt_id = "esp32-senai134-thiago2";
const char *mqtt_topic_sub = "senai134/mesa08/infoTempUmid";
const char *mqtt_topic_pub = "";

void callback(char *, byte *, unsigned int);
void mqttConnect(void);
void tratamentoMsg(String);
void mostraDisplay(float temp, float umid, time_t timestamp);
void templateDisplay(void);

void setup()
{
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  templateDisplay();
  conectaWiFi();
   
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  tempoLocal.setLocation("America/Sao_Paulo");
}

void loop()
{
  checkWiFi();
  if (!client.connected())
    mqttConnect();

  client.loop();
}

void callback(char *topic, byte *payload, unsigned int length)
{
  Serial.printf("mensagem recebida em %s: ", topic);

  String mensagem = "";
  for (unsigned int i = 0; i < length; i++)
  {
    char c = (char)payload[i];
    mensagem += c;
  }
  Serial.println(mensagem);

  tratamentoMsg(mensagem);
}

void mqttConnect()
{
  while (!client.connected())
  {
    Serial.println("Conectando ao MQTT...");

    if (client.connect(mqtt_id))
    {
      Serial.println("Conectado com sucesso");
      client.subscribe(mqtt_topic_sub);
    }

    else
    {
      Serial.print("falha, rc=");
      Serial.println(client.state());
      Serial.println("tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void tratamentoMsg(String msg)
{
  String mensagem = msg;
  JsonDocument doc;
  DeserializationError erro = deserializeJson(doc, mensagem);

  if (erro)
  {
    Serial.println("Mensagem Recebida não esta no formato Json");
    return;
  }

  else
  {
    float temperatura, umidade;
    time_t timestamp;

    if (!doc["temp"].isNull())
      temperatura = doc["temp"];

    if (!doc["umid"].isNull())
      umidade = doc["umid"];

    if (!doc["timestamp"].isNull())
      timestamp = doc["timestamp"];

    mostraDisplay(temperatura, umidade, timestamp);
  }
}

// TODO ARRUMAR ISSO NUMA PROXIMA OPORTUNIDADE, MAS NÃO HOJE
void mostraDisplay(float temp, float umid, time_t time)
{
  float temperatura = temp;
  float umidade = umid;
  time_t timestamp = time;

  lcd.setCursor(6,1);
  temperatura = constrain(temperatura, 0, 99);
  lcd.print(temperatura, 1);
  
  umidade = constrain(umidade, 0, 100);
  lcd.setCursor(6,2);
  lcd.print(umidade, 1);

  lcd.setCursor(0,3);
  tempoLocal.setTime(timestamp);
  lcd.print(tempoLocal.dateTime("d/m/Y H:i"));

Tabela com os principais placeholders disponíveis
Código	Significado	Exemplo
Y	Ano com 4 dígitos	2025
y	Ano com 2 dígitos	25
m	Mês com 2 dígitos	05
n	Mês sem zero à esquerda	5
d	Dia do mês com 2 dígitos	29
j	Dia do mês sem zero	9
H	Hora (formato 24h, 2 dig.)	08
G	Hora (24h, sem zero)	8
h	Hora (formato 12h, 2 dig.)	08
g	Hora (12h, sem zero)	8
i	Minutos com 2 dígitos	30
s	Segundos com 2 dígitos	09
A	AM ou PM (maiúsculo)	AM
a	am ou pm (minúsculo)	am
D	Dia da semana abrev. (inglês)	Thu
l	Nome completo do dia (inglês)	Thursday
M	Mês abreviado (inglês)	May
F	Nome completo do mês	May
z	Dia do ano (0 a 365)	148
W	Semana do ano (ISO-8601)	22
T	Abreviação do fuso horário	BRT
O	Diferença para UTC (num)	-0300

}

void templateDisplay()
{
  lcd.home();
  lcd.print("Ambiente Monitorado");

  lcd.setCursor(0,1);
  lcd.print("Temp:     C"); // (6,1)

  lcd.setCursor(0,2);
  lcd.print("Umid:     %"); // (6,1)
}
*/